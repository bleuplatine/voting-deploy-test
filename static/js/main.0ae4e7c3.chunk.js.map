{"version":3,"sources":["getWeb3.js","App.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","useState","accounts","owner","contract","data","setData","showAlert1","setShowAlert1","messageAlert1","setMessageAlert1","showAlert","setShowAlert","messageAlert","setMessageAlert","showEvent","setShowEvent","messageEvent","setMessageEvent","contentForm","setContentForm","eventValue","setEventValue","workflowStatusId","setWorkflowStatusId","actualAccount","setActualAccount","voter","setVoter","votersList","setVotersList","proposalsList","setProposalsList","currentVote","setCurrentVote","voteOK","setVoteOK","winnersList","setWinnersList","statusButton","refAddress","useRef","refProposal","useEffect","init","on","length","methods","getVoter","call","hasVoted","old","sort","b","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","getWorkflowStatus","statusId","events","allEvents","err","evt","event","alert","error","handleWorkflow","e","preventDefault","startProposalsRegistering","send","from","endProposalsRegistering","startVotingSession","fetchAllProposals","endVotingSession","handleResult","test","message","plusVoter","current","value","addVoter","plusProposal","val","addProposal","getAllProposals","list","handleVote","setVote","tallyVotesDraw","getWinners","className","Card","Header","toUpperCase","Body","Form","Button","onClick","variant","type","Alert","onClose","dismissible","Heading","Modal","show","onHide","dialogClassName","closeButton","Title","id","class","Group","controlId","Label","Control","ref","onChange","target","Footer","ListGroup","map","i","Item","onSubmit","Check","label","name","Table","striped","bordered","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0ae4e7c3.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport Alert from 'react-bootstrap/Alert';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Table from 'react-bootstrap/Table';\nimport Modal from 'react-bootstrap/Modal';\n\n\nconst App = () => {\n  const [data, setData] = useState({\n    // workflowStatusId: null,\n    web3: null,\n    accounts: null,\n    owner: null,\n    contract: null,\n  });\n  const [showAlert1, setShowAlert1] = useState(false)\n  const [messageAlert1, setMessageAlert1] = useState('')\n  const [showAlert, setShowAlert] = useState(false)\n  const [messageAlert, setMessageAlert] = useState('')\n  const [showEvent, setShowEvent] = useState(false)\n  const [messageEvent, setMessageEvent] = useState('')\n  const [contentForm, setContentForm] = useState('')\n  const [eventValue, setEventValue] = useState('')\n  const [workflowStatusId, setWorkflowStatusId] = useState(\"0\")\n  const [actualAccount, setActualAccount] = useState('')\n  const [voter, setVoter] = useState(null)\n  const [votersList, setVotersList] = useState([])\n  const [proposalsList, setProposalsList] = useState([])\n  const [currentVote, setCurrentVote] = useState(null)\n  const [voteOK, setVoteOK] = useState(false)\n  const [winnersList, setWinnersList] = useState(null)\n\n  const status = [\n    'Enregistrement des voteurs en cours',\n    'Enregistrement des propositions en cours',\n    'Enregistrement des propositions terminée',\n    'Session de vote en cours',\n    'Session de vote terminée',\n    'Résultats des votes'\n  ]\n  const statusButton = [\n    \"Débuter l'enregistrement des propositions\",\n    \"Stopper l'enregistrement des propositions\",\n    \"Débuter la session de vote\",\n    \"Stopper la session de vote\",\n    \"Afficher le résultat des votes\"\n  ]\n\n  const refAddress = useRef();\n  const refProposal = useRef();\n\n\n  useEffect(() => {\n    init();\n  }, []);\n\n  useEffect(() => {\n    window.ethereum.on(\"accountsChanged\", accounts => {\n      if (accounts.length > 0) setActualAccount(accounts[0]);\n    });\n  });\n\n  useEffect(() => {\n    (workflowStatusId === \"3\") && (async () => {\n      const { contract } = data;\n      const voter = await contract.methods.getVoter(actualAccount).call();\n      setVoteOK(voter.hasVoted)\n    })()\n    console.log(`voteOK`, voteOK)\n  }, [actualAccount])\n\n  useEffect(() => {\n    // if (data.owner) console.log(`owner`, data.owner)\n    // if (data.accounts) console.log(`accounts`, data.accounts);\n    // if (actualAccount) console.log(`actualAccount`, actualAccount)\n    console.log(`workflowStatusId`, workflowStatusId)\n    if (currentVote) console.log(`currentVote`, currentVote)\n    if (voter) {\n      setVotersList(old => [...old, voter])\n      setVoter(null)\n    }\n    if (winnersList) console.log(`winnersList`, winnersList)\n  }, [data, actualAccount, workflowStatusId, voter, currentVote, winnersList]);\n\n  useEffect(() => {\n    console.log(`proposalsList`, proposalsList)\n    console.log(`proposalsListSorted`, [...proposalsList].sort((a, b) => !b[1] - !a[1] || b[1] - a[1]))\n  }, [proposalsList]);\n\n  useEffect(() => {\n    if (eventValue === \"VoterRegistered\") {\n      setMessageEvent(\"Le voteur a été enregistré\")\n      setShowEvent(true)\n      setEventValue('')\n    }\n    if (eventValue === \"ProposalRegistered\") {\n      setMessageEvent(\"La proposition a été enregistrée\")\n      setShowEvent(true)\n      setEventValue('')\n    }\n    if (eventValue === \"Voted\") {\n      setMessageEvent(\"Le vote a été enregistré\")\n      setShowEvent(true)\n      setEventValue('')\n    }\n  }, [eventValue]);\n\n  const init = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      const owner = await accounts[0];\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = VotingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        VotingContract.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n\n      const statusId = await instance.methods.getWorkflowStatus().call()\n      setWorkflowStatusId(statusId)\n      console.log(`statusId`, statusId)\n\n      // Set web3, accounts, and contract to the data, and then proceed with an\n      // example of interacting with the contract's methods.\n      setData({ web3, accounts, owner, contract: instance });\n\n      // Get All events emitted\n      await instance.events.allEvents((err, evt) => {\n        setEventValue(evt.event)\n        console.log(`evt`, evt.event)\n      })\n\n      console.log(`accounts`, data.accounts)\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  const handleWorkflow = async (e) => {\n    e.preventDefault()\n    setEventValue('')\n    try {\n      const { owner, contract } = data;\n      switch (workflowStatusId) {\n        case \"0\":\n          await contract.methods.startProposalsRegistering().send({ from: owner });\n          break;\n        case \"1\":\n          await contract.methods.endProposalsRegistering().send({ from: owner });\n          break;\n        case \"2\":\n          await contract.methods.startVotingSession().send({ from: owner });\n          fetchAllProposals()\n          break;\n        case \"3\":\n          await contract.methods.endVotingSession().send({ from: owner });\n          break;\n        case \"4\":\n          handleResult()\n          break;\n\n        default:\n          break;\n      }\n      const statusId = await contract.methods.getWorkflowStatus().call()\n      setWorkflowStatusId(statusId)\n\n    } catch (error) {\n      console.log(`error`, error)\n      if (/Registering proposals cant be started now/.test(error.message)) {\n        setMessageAlert1(\"L'enregistrement des propositions ne peut pas commencer maintenant !\")\n        setShowAlert1(true)\n      } else if (/Registering proposals havent started yet/.test(error.message)) {\n        setMessageAlert1(\"L'enregistrement des propositions n'a pas commencé !\")\n        setShowAlert1(true)\n      } else if (/Registering proposals phase is not finished/.test(error.message)) {\n        setMessageAlert1(\"L'enregistrement des propositions n'est pas terminé !\")\n        setShowAlert1(true)\n      } else if (/Voting session havent started yet/.test(error.message)) {\n        setMessageAlert1(\"La session de votes n'a pas commencé !\")\n        setShowAlert1(true)\n      } else if (/Current status is not voting session ended/.test(error.message)) {\n        setMessageAlert1(\"La session de votes n'est pas terminé !\")\n        setShowAlert1(true)\n      } else {\n        setMessageAlert1('Erreur inconnue !')\n        setShowAlert1(true)\n      }\n    }\n  }\n\n  const plusVoter = async (e) => {\n    e.preventDefault()\n    try {\n      const { contract, owner } = data;\n      const address = refAddress.current.value;\n\n      // Interaction avec le smart contract pour ajouter un compte \n      await contract.methods.addVoter(address).send({ from: owner });\n      const voter = await contract.methods.getVoter(address).call();\n      setVoter([voter, address])\n\n    } catch (error) {\n      // console.log(`error`, error.message)\n      if (/Already registered/.test(error.message)) {\n        setMessageAlert('Adresse déjà enregistrée !')\n        setShowAlert(true)\n      } else if (/Voters registration is not open yet/.test(error.message)) {\n        setMessageAlert('Enregistrement des voteurs inactive !')\n        setShowAlert(true)\n      } else {\n        setMessageAlert('Erreur inconnue voter')\n        setShowAlert(true)\n      }\n    }\n    setContentForm(\"\")\n  }\n\n  const plusProposal = async (e) => {\n    setEventValue('')\n    e.preventDefault()\n    try {\n      const { owner, contract } = data;\n      const val = refProposal.current.value;\n\n      // Interaction avec le smart contract pour ajouter un compte \n      await contract.methods.addProposal(val).send({ from: actualAccount || owner });\n      fetchAllProposals()\n      // setProposal(val)\n\n    } catch (error) {\n      // console.log(`error`, error.message)\n      if (/Proposals are not allowed yet/.test(error.message)) {\n        setMessageAlert(\"L'enregistrement des propositions n'est pas encore possible !\")\n        setShowAlert(true)\n      } else if (/The proposal cannot be empty/.test(error.message)) {\n        setMessageAlert('La proposition ne peut être vide !')\n        setShowAlert(true)\n      } else if (/You're not a voter/.test(error.message)) {\n        setMessageAlert(\"Vous n'êtes pas enregistré comme voteur !\")\n        setShowAlert(true)\n      } else {\n        setMessageAlert('Erreur inconnue proposal')\n        setShowAlert(true)\n        console.log(error)\n      }\n    }\n    setContentForm(\"\")\n  }\n\n  const fetchAllProposals = async () => {\n    const { contract } = data;\n    const list = await contract.methods.getAllProposals().call();\n    setProposalsList(list)\n  }\n\n  const handleVote = async (e) => {\n    setEventValue('')\n    e.preventDefault()\n    try {\n      const { owner, contract } = data;\n      fetchAllProposals()\n      await contract.methods.setVote(currentVote).send({ from: actualAccount || owner });\n      setVoteOK(true)\n\n    } catch (error) {\n      if (/Voting session havent started yet/.test(error.message)) {\n        setMessageAlert(\"La session de vote n'a pas encore débuté !\")\n        setShowAlert(true)\n      } else if (/You have already voted/.test(error.message)) {\n        setMessageAlert('Vous avez déjà voté !')\n        setShowAlert(true)\n      } else if (/Proposal not found/.test(error.message)) {\n        setMessageAlert(\"La proposition n'existe pas !\")\n        setShowAlert(true)\n      } else if (/You're not a voter/.test(error.message)) {\n        setMessageAlert(\"Vous n'êtes pas enregistré comme voteur !\")\n        setShowAlert(true)\n      } else {\n        setMessageAlert('Erreur inconnue vote')\n        setShowAlert(true)\n        console.log(error)\n      }\n    }\n  }\n\n  const handleResult = async (e) => {\n    setEventValue('')\n    try {\n      const { owner, contract } = data;\n      fetchAllProposals()\n      await contract.methods.tallyVotesDraw().send({ from: owner });\n      const list = await contract.methods.getWinners().call();\n      setWinnersList(list)\n      const statusId = await contract.methods.getWorkflowStatus().call()\n      setWorkflowStatusId(statusId)\n\n    } catch (error) {\n      if (/Current status is not voting session ended/.test(error.message)) {\n        setMessageAlert(\"La session de vote n'est pas encore terminée !\")\n        setShowAlert(true)\n      } else if (/You're not a voter/.test(error.message)) {\n        setMessageAlert(\"Vous n'êtes pas enregistré comme voteur !\")\n        setShowAlert(true)\n      } else {\n        setMessageAlert('Erreur inconnue result')\n        setShowAlert(true)\n        console.log(error)\n      }\n    }\n  }\n\n  return !data.web3 ? (\n    <div className=\"container\">Loading Web3, accounts, and contract...</div>\n  ) : (\n    <>\n      {/* WORKFLOW */}\n      <div className=\"container mt-5\">\n        <Card className=\"text-center\">\n          <Card.Header className=\"fs-1\"><strong>{status[workflowStatusId].toUpperCase()}</strong></Card.Header>\n          {(actualAccount ? actualAccount.toUpperCase() === data.owner.toUpperCase() : true) &&\n            workflowStatusId < statusButton.length &&\n            <Card.Body>\n              <Form>\n                <Button onClick={handleWorkflow} variant=\"info\" type=\"submit\">\n                  {workflowStatusId < statusButton.length ? statusButton[workflowStatusId] : \"Terminé\"}\n                </Button>\n              </Form>\n            </Card.Body>}\n        </Card>\n\n        {showAlert1 &&\n          <Alert variant=\"warning\" onClose={() => setShowAlert1(false)} dismissible>\n            <Alert.Heading>{messageAlert1}</Alert.Heading>\n          </Alert>}\n\n        {showAlert1 &&\n          <Modal\n            show={showAlert1}\n            onHide={() => setShowAlert1(false)}\n            dialogClassName=\"modal-90w\"\n            aria-labelledby=\"alert-modal\">\n            <Modal.Header closeButton>\n              <Modal.Title id=\"alert-modal\">\n                <i class=\"bi bi-exclamation-triangle\"></i>Alerte\n              </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>{messageAlert1}</Modal.Body>\n          </Modal>}\n      </div>\n\n      {/* VOTERS */}\n      {(workflowStatusId === \"0\") &&\n        (actualAccount ? actualAccount.toUpperCase() === data.owner.toUpperCase() : true) &&\n        <div className=\"container mt-5\">\n          <Card className=\"text-center\">\n            <Card.Header className=\"fs-3\">Enregistrer un nouveau voteur</Card.Header>\n            <Card.Body>\n              <Form>\n                <Form.Group className=\"mb-3\" controlId=\"formAddress\">\n                  <Form.Label>Saisir une adresse Ethereum</Form.Label>\n                  <Form.Control type=\"text\" ref={refAddress}\n                    value={contentForm} onChange={(e) => setContentForm(e.target.value)} />\n                </Form.Group>\n\n                <Button onClick={plusVoter} variant=\"primary\" type=\"submit\">\n                  Enregistrer\n                </Button>\n              </Form>\n            </Card.Body>\n\n            {showAlert &&\n              <Alert variant=\"warning\" onClose={() => setShowAlert(false)} dismissible>\n                <Alert.Heading>{messageAlert}</Alert.Heading>\n              </Alert>}\n            {showEvent &&\n              <Alert variant=\"success\" onClose={() => setShowEvent(false)} dismissible>\n                <Alert.Heading>{messageEvent}</Alert.Heading>\n              </Alert>}\n\n            {showAlert &&\n              <Modal\n                show={showAlert}\n                onHide={() => setShowAlert(false)}\n                dialogClassName=\"modal-90w\"\n                aria-labelledby=\"alert-modal\">\n                <Modal.Header closeButton>\n                  <Modal.Title id=\"alert-modal\">\n                    <i class=\"bi bi-exclamation-triangle text-warning\"></i>Alerte\n                  </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>{messageAlert}</Modal.Body>\n              </Modal>}\n            {showEvent &&\n              <Modal\n                show={showEvent}\n                onHide={() => setShowEvent(false)}\n                dialogClassName=\"modal-90w\"\n                aria-labelledby=\"alert-modal\">\n                <Modal.Header closeButton>\n                  <Modal.Title id=\"alert-modal\">\n                    <i class=\"bi bi-exclamation-triangle text-success\"></i>Alerte\n                  </Modal.Title>\n                </Modal.Header>\n                <Modal.Body><i class=\"bi bi-check2-square\"></i>{messageEvent}</Modal.Body>\n              </Modal>}\n\n\n\n            {votersList[0] &&\n              <>\n                <Card.Footer className=\"fs-3\">Liste des comptes autorisés</Card.Footer>\n                <ListGroup variant=\"flush\">\n                  {votersList &&\n                    votersList.map((a, i) => <ListGroup.Item key={i}>{a}</ListGroup.Item>)\n                  }\n                </ListGroup>\n              </>}\n          </Card>\n\n        </div>}\n\n      {/* PROPOSALS */}\n      {(workflowStatusId === \"1\") &&\n        <div className=\"container mt-5\">\n          <Card className=\"text-center\">\n            <Card.Header className=\"fs-3\">Enregistrer une nouvelle proposition</Card.Header>\n            <Card.Body>\n              <Form>\n                <Form.Group className=\"mb-3\" controlId=\"formAddress\">\n                  <Form.Label>Décrire votre proposition</Form.Label>\n                  <Form.Control type=\"text\" ref={refProposal}\n                    value={contentForm} onChange={(e) => setContentForm(e.target.value)} />\n                </Form.Group>\n\n                <Button onClick={plusProposal} variant=\"primary\" type=\"submit\">\n                  Enregistrer\n                </Button>\n              </Form>\n            </Card.Body>\n\n            {showAlert &&\n              <Alert variant=\"warning\" onClose={() => setShowAlert(false)} dismissible>\n                <Alert.Heading>{messageAlert}</Alert.Heading>\n              </Alert>}\n            {showEvent &&\n              <Alert variant=\"success\" onClose={() => setShowEvent(false)} dismissible>\n                <Alert.Heading>{messageEvent}</Alert.Heading>\n              </Alert>}\n\n            {proposalsList[0] &&\n              <>\n                <Card.Header className=\"fs-3\">Liste des propositions</Card.Header>\n                <ListGroup variant=\"flush\">\n                  {proposalsList &&\n                    proposalsList.map((a, i) => <ListGroup.Item key={i}>{a[0]}</ListGroup.Item>)\n                  }\n                </ListGroup>\n              </>}\n          </Card>\n        </div>}\n\n      {/* VOTING */}\n      {(workflowStatusId === \"3\") &&\n        !voteOK &&\n        <div className=\"container mt-5\">\n          <Card className=\"text-center\">\n            <Card.Header className=\"fs-3\">Voter pour une proposition</Card.Header>\n            <Card.Body>\n              <Form onSubmit={handleVote}>\n                <Form.Group className=\"text-start mb-3\">\n                  {proposalsList &&\n                    proposalsList.map((a, i) =>\n                      <Form.Check\n                        key={i}\n                        onChange={(e) => setCurrentVote(e.target.id)}\n                        type=\"radio\"\n                        label={a[0]}\n                        name=\"formRadios\"\n                        id={i}\n                      />)\n                  }\n                </Form.Group>\n                <Form.Group >\n                  <Button type=\"submit\">Voter</Button>\n                </Form.Group>\n              </Form>\n            </Card.Body>\n          </Card>\n\n          {showAlert &&\n            <Alert variant=\"warning\" onClose={() => setShowAlert(false)} dismissible>\n              <Alert.Heading>{messageAlert}</Alert.Heading>\n            </Alert>}\n        </div>}\n      {(workflowStatusId === \"3\") &&\n        showEvent &&\n        <Alert variant=\"success\" onClose={() => setShowEvent(false)} dismissible>\n          <Alert.Heading>{messageEvent}</Alert.Heading>\n        </Alert>}\n\n      {/* RESULT */}\n      {/* .sort((a, b) => b[1] - a[1]) */}\n      {(workflowStatusId === \"5\") &&\n        <div className=\"container mt-5\">\n          <Card className=\"text-center\">\n            <Card.Header className=\"fs-3\">Proposition(s) adoptée(s)</Card.Header>\n            <ListGroup variant=\"flush\" className=\"fs-4\">\n              {winnersList &&\n                winnersList.map((a, i) => <ListGroup.Item key={i}>{a[0]}</ListGroup.Item>)\n              }\n            </ListGroup>\n          </Card>\n          <Card className=\"text-center mt-5\">\n            <Card.Header className=\"fs-3\">Résultat des votes</Card.Header>\n            <Table striped bordered>\n              <thead>\n                <tr>\n                  <th>Nombre de votes</th>\n                  <th>Propositions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {proposalsList &&\n                  [...proposalsList]\n                    .sort((a, b) => !b[1] - !a[1] || b[1] - a[1])\n                    .map((a, i) => <tr key={i}><td>{a[1]}</td><td>{a[0]}</td></tr>)\n                }\n              </tbody>\n            </Table>\n          </Card>\n\n          {showAlert &&\n            <Alert variant=\"warning\" onClose={() => setShowAlert(false)} dismissible>\n              <Alert.Heading>{messageAlert}</Alert.Heading>\n            </Alert>}\n        </div>}\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import 'bootstrap/dist/css/bootstrap.min.css'\nimport 'bootstrap-dark-5/dist/css/bootstrap-dark.css'\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}